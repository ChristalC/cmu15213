#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <unistd.h>
#include "cache.h"

typedef struct {
  int hit;
  int miss;
  int evict;
} tTuple;

tTuple cache_simu(char op, unsigned long int target_addr, int set, int way, int block, cache_line** cache); 

int main(int argc, char** argv)
{
    int vflag = 0, hflag = 0, index, c;
    int s_val = 0, e_val = 0, b_val = 0;
    char* filename = 0;
    extern char* optarg;
    // printf("Mark 1\n");

    opterr = 0;
    while ((c = getopt(argc, argv, "vhs:E:b:t:")) != -1) {
      switch(c)
      {
        case 'v':
          vflag = 1;
          break;
        case 'h':
          hflag = 1;
          break;
        case 's':
          printf("optarg = %s\n", optarg);
          s_val = atoi(optarg);
          break;
        case 'E':
          e_val = atoi(optarg);
          break;
        case 'b':
          b_val = atoi(optarg);
          break;
        case 't':
          filename = optarg;
          break;
        case '?':
          if (optopt == 's' || optopt == 'E' || optopt == 'b' || optopt == 't') {
            printf("Option -%c requires an argument.\n", optopt);
          }
          return 1;
        default:
          abort();
      }
    }

    int set = pow(2, s_val), way = e_val, block = pow(2, b_val);

    printf("vflag = %d, hflag = %d, s_val = %d, e_val = %d, b_val = %d, filename = %s\n", vflag, hflag, s_val, e_val, b_val, filename);

    cache_line** cache = (cache**) calloc(set, sizeof(cache_line*));
    for (int i = 0; i < set; i++) {
      cache[i] = (cache*) calloc(way, sizeof(cache_line));
    }




    // printSummary(0, 0, 0);
    return 0;
}

tTuple process_file(char* filename, cache_line** cache) {
  FILE* fpIn;
  fpIn = fopen(filename, "r");
  if (fpIn == NULL) {
    printf("Cannot open the file.\n");
    abort();
  }
  char read_line[50];
  char type;
  int addr;
  while (!feof(fpIn)) {
    fgets(read_line, 50, fpIn);
    
}

tTuple cache_simu(unsigned int target_addr, int set, int way, int block, cache_line** cache) {
  int idx = (target_addr >> block) & ~(~0 << s);
  int target_tag = target_addr >> (block + set);
  tTuple ans = {0};
  int max_lru = 0;
  int max_lru_idx;
  int victim_idx = -1;
  int found_lru = -1;
  bool found = false;

  // First roll, trying to find the tag, meanwhile, keep track of the max_lru_idx
  for (int i = 0; i < way; i++) {
    if (found == false) {
      if (cache[idx][i].valid == 1 && cache[idx][i].tag == target_tag) {
        ans.hit = 1;
        found = true;
        found_lru = cache[idx][i].lru;
        cache[idx][i].lru = -1;
        break;
      }
      else if (cache[idx][i].valid == 1 && cache[idx][i].tag != target_tag) {
        if (cache[idx][i].lru > max_lru) {
          max_lru = cache[idx][i].lru;
          max_lru_idx = i;
        }
      else if (cache[idx][i].valid == 0) {
         if (victim_idx == -1) {
           victim_idx = i;
         }
      }
    }
  }

  // If the tag is found in the set, roll the set again to update each lru
  if (found == true) {
    for (int i = 0; i < way; i++) {
      if (cache[idx][i].valid == 1 && cache[idx][i].lru < found_lru) {
        cache[idx][i].lru++;
      }
    }
  }

  // If the tag is not found in the set and there is invalid line in the set, put new data in invalid line, validate that line, and increment lru of all valid lines by 1
  else if (found == false && victim_idx != -1) {
    ans.miss = 1;
    for (int i = 0; i < way; i++) {
      cache[idx][i].lru++;
    }
    cache[idx][victim_idx].lru = 0;
    cache[idx][victim_idx].tag = target_tag;
    cache[idx][victim_idx].valid = 1;
  }

  // If the tag is not found, there is no invalid line in the set, evict max_lru_idx line and put new data in it, increment lru of all other lines
  else if (found == false && victim_idx == -1) {
    ans.miss = 1;
    ans.evict = 1;
    victim_idx = max_lru_idx;
    for (int i = 0; i < way; i++) {
      if (cache[idx][i].valid == 1) {
        cache[idx][i].lru++;
      }
    }
    cache[idx][victim_idx].lru = 0;
    cache[idx][victim_idx].tag = target_tag;
  }
  return ans;
}




















